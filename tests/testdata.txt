# Data with only null values should produce empty schema.
DATA
{ "s": null, "a": [], "m": {} }
SCHEMA
[]
END

# If 'keep_nulls' flag is given, then the input data with null values produces
# schema which seems to be the best match.
DATA keep_nulls
{ "s": null, "a": [], "m": {} }
SCHEMA
[
  {
    "mode": "REPEATED",
    "type": "STRING",
    "name": "a"
  },
  {
    "mode": "NULLABLE",
    "fields": [
      {
        "mode": "NULLABLE",
        "type": "STRING",
        "name": "__unknown__"
      }
    ],
    "type": "RECORD",
    "name": "m"
  },
  {
    "mode": "NULLABLE",
    "type": "STRING",
    "name": "s"
  }
]
END

# Fields with primitive types. BYTES is not supported.
DATA
{ "s": "string", "b": true, "d": "2017-01-01", "i": 1, "t": "17:10:00", "ts": "2017-05-22T17:10:00-07:00", "x": 3.1 }
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "b",
    "type": "BOOLEAN"
  },
  {
    "mode": "NULLABLE",
    "name": "d",
    "type": "DATE"
  },
  {
    "mode": "NULLABLE",
    "name": "i",
    "type": "INTEGER"
  },
  {
    "mode": "NULLABLE",
    "name": "s",
    "type": "STRING"
  },
  {
    "mode": "NULLABLE",
    "name": "t",
    "type": "TIME"
  },
  {
    "mode": "NULLABLE",
    "name": "ts",
    "type": "TIMESTAMP"
  },
  {
    "mode": "NULLABLE",
    "name": "x",
    "type": "FLOAT"
  }
]
END

# INTEGER will upgrade to FLOAT.
DATA
{ "x": 3 }
{ "x": 3.1 }
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "x",
    "type": "FLOAT"
  }
]
END

# FLOAT will not downgrade to INTEGER.
DATA
{ "x": 3.1 }
{ "x": 3 }
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "x",
    "type": "FLOAT"
  }
]
END

# TIMESTAMP field cannot change into a non-String type.
DATA
{ "ts": "2017-05-22T17:10:00-07:00" }
{ "ts": 1.0 }
ERRORS
2: Mismatched type: old=(hard,d,NULLABLE,DATE); new=(hard,d,NULLABLE,FLOAT)
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "ts",
    "type": "TIMESTAMP"
  }
]
END

# DATE cannot change into a non-String type.
DATA
{ "d": "2017-01-01" }
{ "d": 1.0 }
ERRORS
2: Mismatched type: old=(hard,d,NULLABLE,DATE); new=(hard,d,NULLABLE,FLOAT)
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "d",
    "type": "DATE"
  }
]
END

# TIME cannot change into a non-String type.
DATA
{ "t": "17:10:01" }
{ "t": 1.0 }
ERRORS
2: Mismatched type: old=(hard,d,NULLABLE,DATE); new=(hard,d,NULLABLE,FLOAT)
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "t",
    "type": "TIME"
  }
]
END

# Conflicting TIME or DATE field reduces to STRING.
DATA
{ "s": "17:10:02" }
{ "s": "2017-01-01" }
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "s",
    "type": "STRING"
  }
]
END

# Conflicting TIME or TIMESTAMP field reduces to STRING.
DATA
{ "s": "17:10:03" }
{ "s": "2017-01-01T17:10:00" }
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "s",
    "type": "STRING"
  }
]
END

# Conflicting DATE or TIMESTAMP field reduces to STRING.
DATA
{ "s": "2017-01-04" }
{ "s": "2017-01-04T17:10:00" }
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "s",
    "type": "STRING"
  }
]
END

# Fields with arrays and records.
DATA
{ "a": [1, 1], "r": { "r0": "r0", "r1": "r1" } }
SCHEMA
[
  {
    "mode": "REPEATED",
    "name": "a",
    "type": "INTEGER"
  },
  {
    "fields": [
      {
        "mode": "NULLABLE",
        "name": "r0",
        "type": "STRING"
      },
      {
        "mode": "NULLABLE",
        "name": "r1",
        "type": "STRING"
      }
    ],
    "mode": "NULLABLE",
    "name": "r",
    "type": "RECORD"
  }
]
END

# An empty RECORD can be replaced by a known RECORD later.
DATA
{ "a": [1, 2], "r": {} }
{ "a": [1, 2], "r": { "r0": "r0", "r1": "r1" } }
SCHEMA
[
  {
    "mode": "REPEATED",
    "name": "a",
    "type": "INTEGER"
  },
  {
    "fields": [
      {
        "mode": "NULLABLE",
        "name": "r0",
        "type": "STRING"
      },
      {
        "mode": "NULLABLE",
        "name": "r1",
        "type": "STRING"
      }
    ],
    "mode": "NULLABLE",
    "name": "r",
    "type": "RECORD"
  }
]
END

# An empty NULLABLE __empty_record upgrades to a empty REPEATED __empty_record,
# which can then upgrade to a REPEATED RECORD.
DATA
{ "a": [1, 3], "r": {} }
{ "a": [1, 3], "r": [{}] }
{ "a": [1, 3], "r": [{ "r0": "r0", "r1": "r1" }] }
ERRORS
2: Converting schema for "r" from NULLABLE RECORD into REPEATED RECORD
SCHEMA
[
  {
    "mode": "REPEATED",
    "name": "a",
    "type": "INTEGER"
  },
  {
    "fields": [
      {
        "mode": "NULLABLE",
        "name": "r0",
        "type": "STRING"
      },
      {
        "mode": "NULLABLE",
        "name": "r1",
        "type": "STRING"
      }
    ],
    "mode": "REPEATED",
    "name": "r",
    "type": "RECORD"
  }
]
END

# All elements of an array must be of the same type. Also check that an error
# in one element ("a") continues the processing the remaining elements. (The
# bug was caused by a missing try/except block while looping over each
# element.)
DATA
{ "s": "string", "x": 3.2, "i": 3, "b": true, "a": [ "a", 1] }
ERRORS
1: Not all array elements are equal type: ['a', 1]
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "b",
    "type": "BOOLEAN"
  },
  {
    "mode": "NULLABLE",
    "name": "i",
    "type": "INTEGER"
  },
  {
    "mode": "NULLABLE",
    "name": "s",
    "type": "STRING"
  },
  {
    "mode": "NULLABLE",
    "name": "x",
    "type": "FLOAT"
  }
]
END

# Two independent fields are merged without conflict.
DATA
{ "a": [1, 2] }
{ "i": 3 }
SCHEMA
[
  {
    "mode": "REPEATED",
    "name": "a",
    "type": "INTEGER"
  },
  {
    "mode": "NULLABLE",
    "name": "i",
    "type": "INTEGER"
  }
]
END

# Merging happens recursively.
DATA
{ "r" : { "a": [1, 2] } }
{ "r" : { "i": 3 } }
SCHEMA
[
  {
    "fields": [
      {
        "mode": "REPEATED",
        "name": "a",
        "type": "INTEGER"
      },
      {
        "mode": "NULLABLE",
        "name": "i",
        "type": "INTEGER"
      }
    ],
    "mode": "NULLABLE",
    "name": "r",
    "type": "RECORD"
  }
]
END

# Check that 'null' does not clobber a previous interference.
DATA
{ "i": 1 }
{ "i": null }
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "i",
    "type": "INTEGER"
  }
]
END

# NULLABLE STRING for 'null' placeholder upgrades to a hard NULLABLE {type}
# when a real value is given.
DATA
{ "i": null }
{ "i": 3 }
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "i",
    "type": "INTEGER"
  }
]
END

# No upgrade of NULLABLE to REPEATED for primitive types.
DATA
{ "i": 3 }
{ "i": [1, 2] }
ERRORS
2: Mismatched mode for non-RECORD: old=(hard,i,NULLABLE,INTEGER); new=(hard,i,REPEATED,INTEGER)
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "i",
    "type": "INTEGER"
  }
]
END

# No downgrade of REPEATED to NULLABLE.
DATA
{ "i": [1, 2] }
{ "i": 3 }
ERRORS
2: Mismatched mode for non-RECORD: old=(hard,i,REPEATED,INTEGER); new=(hard,i,NULLABLE,INTEGER)
SCHEMA
[
  {
    "mode": "REPEATED",
    "name": "i",
    "type": "INTEGER"
  }
]
END

# NULLABLE RECORD can be upgraded to a REPEATED RECORD.
DATA
{ "r" : { "i": 3 } }
{ "r" : [{ "i": 4 }] }
ERRORS
2: Converting schema for "r" from NULLABLE RECORD into REPEATED RECORD
SCHEMA
[
  {
    "fields": [
      {
        "mode": "NULLABLE",
        "name": "i",
        "type": "INTEGER"
      }
    ],
    "mode": "REPEATED",
    "name": "r",
    "type": "RECORD"
  }
]
END

# REPEATED RECORD will NOT be downgraded to a NULLABLE RECORD.
DATA
{ "r" : [{ "i": 4 }] }
{ "r" : { "i": 3 } }
ERRORS
2: Leaving schema for "r" as REPEATED RECORD
SCHEMA
[
  {
    "fields": [
      {
        "mode": "NULLABLE",
        "name": "i",
        "type": "INTEGER"
      }
    ],
    "mode": "REPEATED",
    "name": "r",
    "type": "RECORD"
  }
]
END

# QINTEGER, QFLOAT, QBOOLEAN
DATA
{ "qi" : "1", "qf": "1.0", "qb": "true" }
{ "qi" : "2", "qf": "1.1", "qb": "True" }
{ "qi" : "3", "qf": "2.0", "qb": "false" }
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "qi",
    "type": "INTEGER"
  },
  {
    "mode": "NULLABLE",
    "name": "qf",
    "type": "FLOAT"
  },
  {
    "mode": "NULLABLE",
    "name": "qb",
    "type": "BOOLEAN"
  }
]
END

# QINTEGER, QFLOAT, QBOOLEAN -> INTEGER, FLOAT, BOOLEAN
DATA
{ "qi" : "1", "qf": "1.0", "qb": "true" }
{ "qi" : 2, "qf": 2.0, "qb": false }
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "qi",
    "type": "INTEGER"
  },
  {
    "mode": "NULLABLE",
    "name": "qf",
    "type": "FLOAT"
  },
  {
    "mode": "NULLABLE",
    "name": "qb",
    "type": "BOOLEAN"
  }
]
END

# [Q]INTEGER + [Q]FLOAT -> FLOAT
DATA
{ "qf_i" : "1.0", "qi_f": "2" }
{ "qf_i" : 1.1, "qi_f": 2.1 }
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "qf_i",
    "type": "FLOAT"
  },
  {
    "mode": "NULLABLE",
    "name": "qi_f",
    "type": "FLOAT"
  }
]
END

# STRING + [QINTEGER, QFLOAT, QBOOLEAN] -> STRING
DATA
{ "qi" : "foo", "qf": "bar", "qb": "foo2" }
{ "qi" : "2", "qf": "1.1", "qb": "True" }
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "qi",
    "type": "STRING"
  },
  {
    "mode": "NULLABLE",
    "name": "qf",
    "type": "STRING"
  },
  {
    "mode": "NULLABLE",
    "name": "qb",
    "type": "STRING"
  }
]
END

# QINTEGER -> QFLOAT -> STRING
DATA
{ "qn" : "1" }
{ "qn" : "1.1" }
{ "qn" : "test" }
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "qn",
    "type": "STRING"
  }
]
END

# QBOOLEAN -> STRING
DATA
{ "qb" : "true" }
{ "qb" : "False" }
{ "qb" : "test" }
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "qb",
    "type": "STRING"
  }
]
END

# DATE, TIME, DATETIME
DATA
{ "qd" : "2018-12-07", "qt": "21:52:00", "qdt": "2018-12-07T21:52:00-08:00" }
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "qd",
    "type": "DATE"
  },
  {
    "mode": "NULLABLE",
    "name": "qt",
    "type": "TIME"
  },
  {
    "mode": "NULLABLE",
    "name": "qdt",
    "type": "TIMESTAMP"
  }
]
END

# DATE, TIME, DATETIME + [QINTEGER, QFLOAT, QBOOLEAN] -> STRING
DATA
{ "qd" : "2018-12-07", "qt": "21:52:00", "qdt": "2018-12-07T21:52:00-08:00" }
{ "qd" : "1", "qt": "1.1", "qdt": "true" }
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "qd",
    "type": "STRING"
  },
  {
    "mode": "NULLABLE",
    "name": "qt",
    "type": "STRING"
  },
  {
    "mode": "NULLABLE",
    "name": "qdt",
    "type": "STRING"
  }
]
END

# Integers in quoted strings that fit inside a signed 64-bit -> INTEGER
# See https://github.com/bxparks/bigquery-schema-generator/issues/18.
DATA
{"name": "9223372036854775807"}
{"name": "-9223372036854775808"}
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "name",
    "type": "INTEGER"
  }
]
END

# Integers in quoted strings that overflow a signed 64-bit -> FLOAT
# See https://github.com/bxparks/bigquery-schema-generator/issues/18.
DATA
{"name": "9223372036854775808"}
{"name": "-9223372036854775809"}
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "name",
    "type": "FLOAT"
  }
]
END

# (Overflowing integer inside quotes) + STRING -> STRING
# See https://github.com/bxparks/bigquery-schema-generator/issues/18.
DATA
{"name": "9223372036854775808"}
{"name": "hello"}
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "name",
    "type": "STRING"
  }
]
END

# TIMESTAMP recognizes Z, UTC, +/-offset suffixes.
# See https://github.com/bxparks/bigquery-schema-generator/issues/19
DATA
{"date": "2019-01-16T12:46:02Z"}
{"date": "2019-01-16T12:46:03 -05:00"}
{"date": "2019-01-16 12:46:01 UTC"}
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "date",
    "type": "TIMESTAMP"
  }
]
END

# Quoted values are forced to be strings if --quoted_values_are_strings flag
# given
DATA quoted_values_are_strings
{ "qi" : "1", "qf": "1.0", "qb": "true" }
{ "qi" : "2", "qf": "1.1", "qb": "True" }
{ "qi" : "3", "qf": "2.0", "qb": "false" }
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "qi",
    "type": "STRING"
  },
  {
    "mode": "NULLABLE",
    "name": "qf",
    "type": "STRING"
  },
  {
    "mode": "NULLABLE",
    "name": "qb",
    "type": "STRING"
  }
]
END

# Simple CSV file
DATA csv
name,surname,age
John,Smith,23
Michael,Johnson,27
Maria,Smith,30
Joanna,Anders,21
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "age",
    "type": "INTEGER"
  },
  {
    "mode": "NULLABLE",
    "name": "name",
    "type": "STRING"
  },
  {
    "mode": "NULLABLE",
    "name": "surname",
    "type": "STRING"
  }
]
END

# A missing field (no comma-separator) is read as a 'null'. An empty field is
# read as an empty string ("") but should be interpreted to be a 'null' to
# allow subsequent non-null fields to determine the type.
DATA csv keep_nulls
name,surname,age
John
Michael,,
Maria,Smith,30
Joanna,Anders,21
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "age",
    "type": "INTEGER"
  },
  {
    "mode": "NULLABLE",
    "name": "name",
    "type": "STRING"
  },
  {
    "mode": "NULLABLE",
    "name": "surname",
    "type": "STRING"
  }
]
END

# CSV file requiring more complex type inference
DATA csv keep_nulls
name,surname,age,is_student,registration_date,score
John
Michael,Johnson,27,True,,2.0
Maria,"","",false,2019-02-26 13:22:00 UTC,
Joanna,Anders,21,"False",2019-02-26 13:23:00,4
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "age",
    "type": "INTEGER"
  },
  {
    "mode": "NULLABLE",
    "name": "is_student",
    "type": "BOOLEAN"
  },
  {
    "mode": "NULLABLE",
    "name": "name",
    "type": "STRING"
  },
  {
    "mode": "NULLABLE",
    "name": "registration_date",
    "type": "TIMESTAMP"
  },
  {
    "mode": "NULLABLE",
    "name": "score",
    "type": "INTEGER"
  },
  {
    "mode": "NULLABLE",
    "name": "surname",
    "type": "STRING"
  }
]
END
