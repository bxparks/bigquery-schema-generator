# Data with only null values should produce empty schema.
DATA
{ "s": null, "a": [], "m": {} }
SCHEMA
[]
END

# If 'keep_nulls' flag is given, then the input data with null values produces
# schema which seems to be the best match.
DATA keep_nulls
{ "s": null, "a": [], "m": {} }
SCHEMA
[
  {
    "mode": "REPEATED",
    "name": "a",
    "type": "STRING"
  },
  {
    "fields": [
      {
        "mode": "NULLABLE",
        "name": "__unknown__",
        "type": "STRING"
      }
    ],
    "mode": "NULLABLE",
    "name": "m",
    "type": "RECORD"
  },
  {
    "mode": "NULLABLE",
    "name": "s",
    "type": "STRING"
  }
]
END

# If 'keep_nulls' flag is given, then the input data with null values produces
# schema which seems to be the best match. This also checks capitalization
DATA keep_nulls
{ "s": null, "aBc": [], "m": {} }
SCHEMA
[
  {
    "mode": "REPEATED",
    "name": "aBc",
    "type": "STRING"
  },
  {
    "fields": [
      {
        "mode": "NULLABLE",
        "name": "__unknown__",
        "type": "STRING"
      }
    ],
    "mode": "NULLABLE",
    "name": "m",
    "type": "RECORD"
  },
  {
    "mode": "NULLABLE",
    "name": "s",
    "type": "STRING"
  }
]
END

# Fields with primitive types. BYTES is not supported.
DATA
{ "s": "string", "b": true, "d": "2017-01-01", "i": 1, "t": "17:10:00", "ts": "2017-05-22T17:10:00-07:00", "x": 3.1 }
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "b",
    "type": "BOOLEAN"
  },
  {
    "mode": "NULLABLE",
    "name": "d",
    "type": "DATE"
  },
  {
    "mode": "NULLABLE",
    "name": "i",
    "type": "INTEGER"
  },
  {
    "mode": "NULLABLE",
    "name": "s",
    "type": "STRING"
  },
  {
    "mode": "NULLABLE",
    "name": "t",
    "type": "TIME"
  },
  {
    "mode": "NULLABLE",
    "name": "ts",
    "type": "TIMESTAMP"
  },
  {
    "mode": "NULLABLE",
    "name": "x",
    "type": "FLOAT"
  }
]
END

# If --ignore_invalid_lines, invalid lines are ignored and processing
# continues.
DATA ignore_invalid_lines
[]
{ "x": 3 }
this is not a JSON object
ERRORS
1: Record should be a JSON Object but was a <class 'list'>
3: Record could not be parsed: Exception: Expecting value: line 1 column 1 (char 0)
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "x",
    "type": "INTEGER"
  }
]
END

# INTEGER will upgrade to FLOAT.
DATA
{ "x": 3 }
{ "x": 3.1 }
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "x",
    "type": "FLOAT"
  }
]
END

# FLOAT will not downgrade to INTEGER.
DATA
{ "x": 3.1 }
{ "x": 3 }
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "x",
    "type": "FLOAT"
  }
]
END

# TIMESTAMP field cannot change into a non-String type.
DATA
{ "ts": "2017-05-22T17:10:00-07:00" }
{ "ts": 1.0 }
ERRORS
2: Ignoring field with mismatched type: old=(hard,ts,NULLABLE,TIMESTAMP); new=(hard,ts,NULLABLE,FLOAT)
SCHEMA
[]
END

# If there are multiple records with a column with a mismatched type, only the
# first one mismatch should trigger a warning message. All subsequent records
# should have that column ignored, even if the mismatch occurs multiple times.
# See Issue 98.
#
# Before that fix, the following would generate a warning each time there is a
# transition between matching and mismatching type for the problematic column.
# So for the following 4 records, the previous version would print 2 warnings,
# one for line #2, and one for line #4.
DATA
{ "ts": "2017-05-22T17:10:00-07:00" }
{ "ts": 1.0 }
{ "ts": 2.0 }
{ "ts": "2017-05-22T17:10:00-07:00" }
ERRORS
2: Ignoring field with mismatched type: old=(hard,ts,NULLABLE,TIMESTAMP); new=(hard,ts,NULLABLE,FLOAT)
SCHEMA
[]
END

# DATE cannot change into a non-String type.
DATA
{ "d": "2017-01-01" }
{ "d": 1.0 }
ERRORS
2: Ignoring field with mismatched type: old=(hard,d,NULLABLE,DATE); new=(hard,d,NULLABLE,FLOAT)
SCHEMA
[]
END

# TIME cannot change into a non-String type.
DATA
{ "t": "17:10:01" }
{ "t": 1.0 }
ERRORS
2: Ignoring field with mismatched type: old=(hard,t,NULLABLE,TIME); new=(hard,t,NULLABLE,FLOAT)
SCHEMA
[]
END

# Conflicting TIME or DATE field reduces to STRING.
DATA
{ "s": "17:10:02" }
{ "s": "2017-01-01" }
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "s",
    "type": "STRING"
  }
]
END

# Conflicting TIME or TIMESTAMP field reduces to STRING.
DATA
{ "s": "17:10:03" }
{ "s": "2017-01-01T17:10:00" }
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "s",
    "type": "STRING"
  }
]
END

# Conflicting DATE or TIMESTAMP field reduces to STRING.
DATA
{ "s": "2017-01-04" }
{ "s": "2017-01-04T17:10:00" }
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "s",
    "type": "STRING"
  }
]
END

# Fields with arrays and records.
DATA
{ "a": [1, 1], "r": { "r0": "r0", "r1": "r1" } }
SCHEMA
[
  {
    "mode": "REPEATED",
    "name": "a",
    "type": "INTEGER"
  },
  {
    "fields": [
      {
        "mode": "NULLABLE",
        "name": "r0",
        "type": "STRING"
      },
      {
        "mode": "NULLABLE",
        "name": "r1",
        "type": "STRING"
      }
    ],
    "mode": "NULLABLE",
    "name": "r",
    "type": "RECORD"
  }
]
END

# An empty RECORD can be replaced by a known RECORD later.
DATA
{ "a": [1, 2], "r": {} }
{ "a": [1, 2], "r": { "r0": "r0", "r1": "r1" } }
SCHEMA
[
  {
    "mode": "REPEATED",
    "name": "a",
    "type": "INTEGER"
  },
  {
    "fields": [
      {
        "mode": "NULLABLE",
        "name": "r0",
        "type": "STRING"
      },
      {
        "mode": "NULLABLE",
        "name": "r1",
        "type": "STRING"
      }
    ],
    "mode": "NULLABLE",
    "name": "r",
    "type": "RECORD"
  }
]
END

# An empty NULLABLE __empty_record upgrades to a empty REPEATED __empty_record,
# which can then upgrade to a REPEATED RECORD.
DATA
{ "a": [1, 3], "r": {} }
{ "a": [1, 3], "r": [{}] }
{ "a": [1, 3], "r": [{ "r0": "r0", "r1": "r1" }] }
ERRORS
2: Converting schema for "r" from NULLABLE RECORD into REPEATED RECORD
SCHEMA
[
  {
    "mode": "REPEATED",
    "name": "a",
    "type": "INTEGER"
  },
  {
    "fields": [
      {
        "mode": "NULLABLE",
        "name": "r0",
        "type": "STRING"
      },
      {
        "mode": "NULLABLE",
        "name": "r1",
        "type": "STRING"
      }
    ],
    "mode": "REPEATED",
    "name": "r",
    "type": "RECORD"
  }
]
END

# Arrays of Arrays not allowed.
DATA
{ "a": [[]] }
ERRORS
1: Unsupported array element type: __empty_array__
SCHEMA
[]
END

# All elements of an array must be of the same type. Also check that an error
# in one element ("a") continues the processing the remaining elements. (The
# bug was caused by a missing try/except block while looping over each
# element.)
DATA
{ "s": "string", "x": 3.2, "i": 3, "b": true, "a": [ "a", 1] }
ERRORS
1: All array elements must be the same compatible type: ['a', 1]
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "b",
    "type": "BOOLEAN"
  },
  {
    "mode": "NULLABLE",
    "name": "i",
    "type": "INTEGER"
  },
  {
    "mode": "NULLABLE",
    "name": "s",
    "type": "STRING"
  },
  {
    "mode": "NULLABLE",
    "name": "x",
    "type": "FLOAT"
  }
]
END

# Two independent fields are merged without conflict.
DATA
{ "a": [1, 2] }
{ "i": 3 }
SCHEMA
[
  {
    "mode": "REPEATED",
    "name": "a",
    "type": "INTEGER"
  },
  {
    "mode": "NULLABLE",
    "name": "i",
    "type": "INTEGER"
  }
]
END

# Merging happens recursively.
DATA
{ "r" : { "a": [1, 2] } }
{ "r" : { "i": 3 } }
SCHEMA
[
  {
    "fields": [
      {
        "mode": "REPEATED",
        "name": "a",
        "type": "INTEGER"
      },
      {
        "mode": "NULLABLE",
        "name": "i",
        "type": "INTEGER"
      }
    ],
    "mode": "NULLABLE",
    "name": "r",
    "type": "RECORD"
  }
]
END

# Check that 'null' does not clobber a previous interference.
DATA
{ "i": 1 }
{ "i": null }
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "i",
    "type": "INTEGER"
  }
]
END

# NULLABLE STRING for 'null' placeholder upgrades to a hard NULLABLE {type}
# when a real value is given.
DATA
{ "i": null }
{ "i": 3 }
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "i",
    "type": "INTEGER"
  }
]
END

# No upgrade of NULLABLE to REPEATED for primitive types.
DATA
{ "i": 3 }
{ "i": [1, 2] }
ERRORS
2: Cannot convert NULLABLE(hard) -> REPEATED: old=(hard,i,NULLABLE,INTEGER); new=(hard,i,REPEATED,INTEGER)
SCHEMA
[]
END

# No downgrade of REPEATED to NULLABLE.
DATA
{ "i": [1, 2] }
{ "i": 3 }
ERRORS
2: Cannot convert REPEATED -> NULLABLE(hard): old=(hard,i,REPEATED,INTEGER); new=(hard,i,NULLABLE,INTEGER)
SCHEMA
[]
END

# NULLABLE RECORD can be upgraded to a REPEATED RECORD.
DATA
{ "r" : { "i": 3 } }
{ "r" : [{ "i": 4 }] }
ERRORS
2: Converting schema for "r" from NULLABLE RECORD into REPEATED RECORD
SCHEMA
[
  {
    "fields": [
      {
        "mode": "NULLABLE",
        "name": "i",
        "type": "INTEGER"
      }
    ],
    "mode": "REPEATED",
    "name": "r",
    "type": "RECORD"
  }
]
END

# REPEATED RECORD will NOT be downgraded to a NULLABLE RECORD.
DATA
{ "r" : [{ "i": 4 }] }
{ "r" : { "i": 3 } }
ERRORS
2: Leaving schema for "r" as REPEATED RECORD
SCHEMA
[
  {
    "fields": [
      {
        "mode": "NULLABLE",
        "name": "i",
        "type": "INTEGER"
      }
    ],
    "mode": "REPEATED",
    "name": "r",
    "type": "RECORD"
  }
]
END

# QINTEGER, QFLOAT, QBOOLEAN
DATA
{ "qi" : "1", "qf": "1.0", "qb": "true" }
{ "qi" : "2", "qf": "1.1", "qb": "True" }
{ "qi" : "3", "qf": "2.0", "qb": "false" }
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "qb",
    "type": "BOOLEAN"
  },
  {
    "mode": "NULLABLE",
    "name": "qf",
    "type": "FLOAT"
  },
  {
    "mode": "NULLABLE",
    "name": "qi",
    "type": "INTEGER"
  }
]
END

# QINTEGER, QFLOAT, QBOOLEAN -> INTEGER, FLOAT, BOOLEAN
DATA
{ "qi" : "1", "qf": "1.0", "qb": "true" }
{ "qi" : 2, "qf": 2.0, "qb": false }
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "qb",
    "type": "BOOLEAN"
  },
  {
    "mode": "NULLABLE",
    "name": "qf",
    "type": "FLOAT"
  },
  {
    "mode": "NULLABLE",
    "name": "qi",
    "type": "INTEGER"
  }
]
END

# [Q]INTEGER + [Q]FLOAT -> FLOAT
DATA
{ "qf_i" : "1.0", "qi_f": "2" }
{ "qf_i" : 1.1, "qi_f": 2.1 }
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "qf_i",
    "type": "FLOAT"
  },
  {
    "mode": "NULLABLE",
    "name": "qi_f",
    "type": "FLOAT"
  }
]
END

# STRING + [QINTEGER, QFLOAT, QBOOLEAN] -> STRING
DATA
{ "qi" : "foo", "qf": "bar", "qb": "foo2" }
{ "qi" : "2", "qf": "1.1", "qb": "True" }
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "qb",
    "type": "STRING"
  },
  {
    "mode": "NULLABLE",
    "name": "qf",
    "type": "STRING"
  },
  {
    "mode": "NULLABLE",
    "name": "qi",
    "type": "STRING"
  }
]
END

# QINTEGER -> QFLOAT -> STRING
DATA
{ "qn" : "1" }
{ "qn" : "1.1" }
{ "qn" : "test" }
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "qn",
    "type": "STRING"
  }
]
END

# QBOOLEAN -> STRING
DATA
{ "qb" : "true" }
{ "qb" : "False" }
{ "qb" : "test" }
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "qb",
    "type": "STRING"
  }
]
END

# DATE, TIME, DATETIME
DATA
{ "qd" : "2018-12-07", "qt": "21:52:00", "qdt": "2018-12-07T21:52:00-08:00" }
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "qd",
    "type": "DATE"
  },
  {
    "mode": "NULLABLE",
    "name": "qdt",
    "type": "TIMESTAMP"
  },
  {
    "mode": "NULLABLE",
    "name": "qt",
    "type": "TIME"
  }
]
END

# DATE, TIME, DATETIME + [QINTEGER, QFLOAT, QBOOLEAN] -> STRING
DATA
{ "qd" : "2018-12-07", "qt": "21:52:00", "qdt": "2018-12-07T21:52:00-08:00" }
{ "qd" : "1", "qt": "1.1", "qdt": "true" }
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "qd",
    "type": "STRING"
  },
  {
    "mode": "NULLABLE",
    "name": "qdt",
    "type": "STRING"
  },
  {
    "mode": "NULLABLE",
    "name": "qt",
    "type": "STRING"
  }
]
END

# Support less common incantations of integers
DATA
{ "qi": "1" }
{ "qi": "+1" }
{ "qi": "-1" }
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "qi",
    "type": "INTEGER"
  }
]
END

# Support less common incantations of floats. The examples should match the
# test cases in TestSchemaGenerator.test_float_matcher_valid() ideally.
DATA
{ "qf": "1.0" }
{ "qf": "-1.0" }
{ "qf": "+1.0" }
{ "qf": "1." }
{ "qf": "-1." }
{ "qf": "+1." }
{ "qf": ".1" }
{ "qf": "-.1" }
{ "qf": "+.1" }
{ "qf": "1e1" }
{ "qf": "-1e1" }
{ "qf": "+1e1" }
{ "qf": "1e-1" }
{ "qf": "-1e-1" }
{ "qf": "+1e-1" }
{ "qf": "1e+1" }
{ "qf": "-1e+1" }
{ "qf": "+1e+1" }
{ "qf": "2.e1" }
{ "qf": "-2.e1" }
{ "qf": "+2.e1" }
{ "qf": "2.e-1" }
{ "qf": "-2.e-1" }
{ "qf": "+2.e-1" }
{ "qf": "2.e+1" }
{ "qf": "-2.e+1" }
{ "qf": "+2.e+1" }
{ "qf": "3.3e1" }
{ "qf": "-3.3e1" }
{ "qf": "+3.3e1" }
{ "qf": "3.3e-1" }
{ "qf": "-3.3e-1" }
{ "qf": "+3.3e-1" }
{ "qf": "3.3e+1" }
{ "qf": "-3.3e+1" }
{ "qf": "+3.3e+1" }
{ "qf": ".4e1" }
{ "qf": "-.4e1" }
{ "qf": "+.4e1" }
{ "qf": ".4e-1" }
{ "qf": "-.4e-1" }
{ "qf": "+.4e-1" }
{ "qf": ".4e+1" }
{ "qf": "-.4e+1" }
{ "qf": "+.4e+1" }
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "qf",
    "type": "FLOAT"
  }
]
END

# Integers in quoted strings that fit inside a signed 64-bit -> INTEGER
# See https://github.com/bxparks/bigquery-schema-generator/issues/18.
DATA
{"name": "9223372036854775807"}
{"name": "-9223372036854775808"}
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "name",
    "type": "INTEGER"
  }
]
END

# Integers in quoted strings that overflow a signed 64-bit -> FLOAT
# See https://github.com/bxparks/bigquery-schema-generator/issues/18.
DATA
{"name": "9223372036854775808"}
{"name": "-9223372036854775809"}
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "name",
    "type": "FLOAT"
  }
]
END

# (Overflowing integer inside quotes) + STRING -> STRING
# See https://github.com/bxparks/bigquery-schema-generator/issues/18.
DATA
{"name": "9223372036854775808"}
{"name": "hello"}
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "name",
    "type": "STRING"
  }
]
END

# TIMESTAMP recognizes Z, UTC, +/-offset suffixes.
# See https://github.com/bxparks/bigquery-schema-generator/issues/19
DATA
{"date": "2019-01-16T12:46:02Z"}
{"date": "2019-01-16T12:46:03 -05:00"}
{"date": "2019-01-16 12:46:01 UTC"}
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "date",
    "type": "TIMESTAMP"
  }
]
END

# Quoted values are forced to be strings if --quoted_values_are_strings flag
# given
DATA quoted_values_are_strings
{ "qi" : "1", "qf": "1.0", "qb": "true" }
{ "qi" : "2", "qf": "1.1", "qb": "True" }
{ "qi" : "3", "qf": "2.0", "qb": "false" }
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "qb",
    "type": "STRING"
  },
  {
    "mode": "NULLABLE",
    "name": "qf",
    "type": "STRING"
  },
  {
    "mode": "NULLABLE",
    "name": "qi",
    "type": "STRING"
  }
]
END

# Incompatible types error printing full path given
DATA
{"source_machine":{"port":80},"dest_machine":{"port":80}}
{"source_machine":{"port":80},"dest_machine":{"port":"http-port"}}
ERRORS
2: Ignoring field with mismatched type: old=(hard,dest_machine.port,NULLABLE,INTEGER); new=(hard,dest_machine.port,NULLABLE,STRING)
SCHEMA
[
  {
    "fields": [],
    "mode": "NULLABLE",
    "name": "dest_machine",
    "type": "RECORD"
  },
  {
    "fields": [
      {
        "mode": "NULLABLE",
        "name": "port",
        "type": "INTEGER"
      }
    ],
    "mode": "NULLABLE",
    "name": "source_machine",
    "type": "RECORD"
  }
]
END

# Simple CSV file
DATA csv
name,surname,age
John,Smith,23
Michael,Johnson,27
Maria,Smith,30
Joanna,Anders,21
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "name",
    "type": "STRING"
  },
  {
    "mode": "NULLABLE",
    "name": "surname",
    "type": "STRING"
  },
  {
    "mode": "NULLABLE",
    "name": "age",
    "type": "INTEGER"
  }
]
END

# A missing field (no comma-separator) is read as a 'null'. An empty field is
# read as an empty string ("") but should be interpreted to be a 'null' to
# allow subsequent non-null fields to determine the type.
DATA csv
name,surname,age
John
Michael,,
Maria,Smith,30
Joanna,Anders,21
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "name",
    "type": "STRING"
  },
  {
    "mode": "NULLABLE",
    "name": "surname",
    "type": "STRING"
  },
  {
    "mode": "NULLABLE",
    "name": "age",
    "type": "INTEGER"
  }
]
END

# CSV file requiring more complex type inference
DATA csv
name,surname,age,is_student,registration_date,score
John
Michael,Johnson,27,True,,2.0
Maria,"",,false,2019-02-26 13:22:00 UTC,
Joanna,Anders,21,"False",2019-02-26 13:23:00,4
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "name",
    "type": "STRING"
  },
  {
    "mode": "NULLABLE",
    "name": "surname",
    "type": "STRING"
  },
  {
    "mode": "NULLABLE",
    "name": "age",
    "type": "INTEGER"
  },
  {
    "mode": "NULLABLE",
    "name": "is_student",
    "type": "BOOLEAN"
  },
  {
    "mode": "NULLABLE",
    "name": "registration_date",
    "type": "TIMESTAMP"
  },
  {
    "mode": "NULLABLE",
    "name": "score",
    "type": "FLOAT"
  }
]
END

# Infer 'REQUIRED' mode for a consistently filled in value - simple
DATA csv infer_mode
a,b,c,d,e
,ho,hi,true
3,hu,he,
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "a",
    "type": "INTEGER"
  },
  {
    "mode": "REQUIRED",
    "name": "b",
    "type": "STRING"
  },
  {
    "mode": "REQUIRED",
    "name": "c",
    "type": "STRING"
  },
  {
    "mode": "NULLABLE",
    "name": "d",
    "type": "BOOLEAN"
  },
  {
    "mode": "NULLABLE",
    "name": "e",
    "type": "STRING"
  }
]
END

# Infer 'REQUIRED' mode for a consistently filled in value - complex
DATA csv infer_mode
name,surname,age
John
Michael,,
Maria,Smith,30
Joanna,Anders,21
SCHEMA
[
  {
    "mode": "REQUIRED",
    "name": "name",
    "type": "STRING"
  },
  {
    "mode": "NULLABLE",
    "name": "surname",
    "type": "STRING"
  },
  {
    "mode": "NULLABLE",
    "name": "age",
    "type": "INTEGER"
  }
]
END

# Sanitize the names to comply with BigQuery recursively.
DATA sanitize_names
{ "r" : { "a-name": [1, 2] } }
SCHEMA
[
  {
    "fields": [
      {
        "mode": "REPEATED",
        "name": "a_name",
        "type": "INTEGER"
      }
    ],
    "mode": "NULLABLE",
    "name": "r",
    "type": "RECORD"
  }
]
END

# Sanitize the names to comply with BigQuery.
DATA csv infer_mode sanitize_names
name,surname,age_in_#years,eighteencharacterseighteencharacterseighteencharacterseighteencharacterseighteencharacterseighteencharacterseighteencharacterseighteencharacters
John
Michael,,
Maria,Smith,30,yes
Joanna,Anders,21,yes
SCHEMA
[
  {
    "mode": "REQUIRED",
    "name": "name",
    "type": "STRING"
  },
  {
    "mode": "NULLABLE",
    "name": "surname",
    "type": "STRING"
  },
  {
    "mode": "NULLABLE",
    "name": "age_in__years",
    "type": "INTEGER"
  },
  {
    "mode": "NULLABLE",
    "name": "eighteencharacterseighteencharacterseighteencharacterseighteencharacterseighteencharacterseighteencharacterseighteencharacterse",
    "type": "STRING"
  }
]
END

# Empty JSON input file, existing schema no modification done, purely testing
# round trip schema generation
DATA keep_nulls
{}
EXISTING_SCHEMA
[
  {
    "name": "event_name",
    "type": "STRING",
    "mode": "NULLABLE"
  },
  {
    "name": "event_time",
    "type": "TIMESTAMP",
    "mode": "NULLABLE"
  },
  {
    "name": "connection_info",
    "type": "RECORD",
    "mode": "NULLABLE",
    "fields": [
      {
        "name": "src_ip",
        "type": "STRING"
      },
      {
        "name": "dest_ip",
        "type": "STRING"
      },
      {
        "name": "src_port",
        "type": "INTEGER"
      },
      {
        "name": "dest_port",
        "type": "INTEGER"
      },
      {
        "name": "flags",
        "type": "STRING",
        "mode": "REPEATED"
      }
    ]
  },
  {
    "name": "data_sources",
    "type": "STRING",
    "mode": "REPEATED"
  },
  {
    "name": "test_float",
    "type": "FLOAT",
    "mode": "NULLABLE"
  },
  {
    "name": "test_boolean",
    "type": "BOOLEAN",
    "mode": "NULLABLE"
  }
]
SCHEMA
[
  {
    "fields": [
      {
        "mode": "NULLABLE",
        "name": "dest_ip",
        "type": "STRING"
      },
      {
        "mode": "NULLABLE",
        "name": "dest_port",
        "type": "INTEGER"
      },
      {
        "mode": "REPEATED",
        "name": "flags",
        "type": "STRING"
      },
      {
        "mode": "NULLABLE",
        "name": "src_ip",
        "type": "STRING"
      },
      {
        "mode": "NULLABLE",
        "name": "src_port",
        "type": "INTEGER"
      }
    ],
    "mode": "NULLABLE",
    "name": "connection_info",
    "type": "RECORD"
  },
  {
    "mode": "REPEATED",
    "name": "data_sources",
    "type": "STRING"
  },
  {
    "mode": "NULLABLE",
    "name": "event_name",
    "type": "STRING"
  },
  {
    "mode": "NULLABLE",
    "name": "event_time",
    "type": "TIMESTAMP"
  },
  {
    "mode": "NULLABLE",
    "name": "test_boolean",
    "type": "BOOLEAN"
  },
  {
    "mode": "NULLABLE",
    "name": "test_float",
    "type": "FLOAT"
  }
]
END

# JSON existing schema file valid record instead of string, no modification
# done
DATA keep_nulls
{"event_name": "test event", "event_time": "2020-06-02 23:57:12.120174 UTC", "connection_info": {"src_ip": "10.0.1.102", "src_port": 53, "dest_ip": "10.0.0.1", "dest_port": 53}, "data_sources": ["dhcp", "bro", "dns"], "test_float": 17.6, "test_boolean": "True"}
EXISTING_SCHEMA
[
  {
    "name": "event_name",
    "type": "STRING",
    "mode": "NULLABLE"
  },
  {
    "name": "event_time",
    "type": "TIMESTAMP",
    "mode": "NULLABLE"
  },
  {
    "name": "connection_info",
    "type": "RECORD",
    "mode": "NULLABLE",
    "fields": [
      {
        "name": "src_ip",
        "type": "STRING"
      },
      {
        "name": "dest_ip",
        "type": "STRING"
      },
      {
        "name": "src_port",
        "type": "INTEGER"
      },
      {
        "name": "dest_port",
        "type": "INTEGER"
      },
      {
        "name": "flags",
        "type": "STRING",
        "mode": "REPEATED"
      }
    ]
  },
  {
    "name": "data_sources",
    "type": "STRING",
    "mode": "REPEATED"
  },
  {
    "name": "test_float",
    "type": "FLOAT",
    "mode": "NULLABLE"
  },
  {
    "name": "test_boolean",
    "type": "BOOLEAN",
    "mode": "NULLABLE"
  }
]
SCHEMA
[
  {
    "fields": [
      {
        "mode": "NULLABLE",
        "name": "dest_ip",
        "type": "STRING"
      },
      {
        "mode": "NULLABLE",
        "name": "dest_port",
        "type": "INTEGER"
      },
      {
        "mode": "REPEATED",
        "name": "flags",
        "type": "STRING"
      },
      {
        "mode": "NULLABLE",
        "name": "src_ip",
        "type": "STRING"
      },
      {
        "mode": "NULLABLE",
        "name": "src_port",
        "type": "INTEGER"
      }
    ],
    "mode": "NULLABLE",
    "name": "connection_info",
    "type": "RECORD"
  },
  {
    "mode": "REPEATED",
    "name": "data_sources",
    "type": "STRING"
  },
  {
    "mode": "NULLABLE",
    "name": "event_name",
    "type": "STRING"
  },
  {
    "mode": "NULLABLE",
    "name": "event_time",
    "type": "TIMESTAMP"
  },
  {
    "mode": "NULLABLE",
    "name": "test_boolean",
    "type": "BOOLEAN"
  },
  {
    "mode": "NULLABLE",
    "name": "test_float",
    "type": "FLOAT"
  }
]
END

# JSON existing schema changes in casing when generating schema should not
# result in a change from what existed already
DATA keep_nulls
{"eventname": "test event1", "event_time": "2020-06-02 23:57:12.120174 UTC", "connection_info": {"src_ip": "10.0.1.102", "src_port": 53, "dest_ip": "10.0.0.1", "dest_port": 53}, "data_sources": ["dhcp", "bro", "dns"], "test_float": 17.6, "test_boolean": "True"}
{"EVENTNAME": "test event2", "event_time": "2020-06-02 23:57:12.120174 UTC", "connection_info": {"src_ip": "10.0.1.102", "src_port": 53, "dest_ip": "10.0.0.1", "dest_port": 53}, "data_sources": ["dhcp", "bro", "dns"], "test_float": 17.6, "test_boolean": "True"}
EXISTING_SCHEMA
[
  {
    "name": "eventName",
    "type": "STRING",
    "mode": "NULLABLE"
  },
  {
    "name": "event_time",
    "type": "TIMESTAMP",
    "mode": "NULLABLE"
  },
  {
    "name": "connection_info",
    "type": "RECORD",
    "mode": "NULLABLE",
    "fields": [
      {
        "name": "src_ip",
        "type": "STRING"
      },
      {
        "name": "dest_ip",
        "type": "STRING"
      },
      {
        "name": "src_port",
        "type": "INTEGER"
      },
      {
        "name": "dest_port",
        "type": "INTEGER"
      },
      {
        "name": "flags",
        "type": "STRING",
        "mode": "REPEATED"
      }
    ]
  },
  {
    "name": "data_sources",
    "type": "STRING",
    "mode": "REPEATED"
  },
  {
    "name": "test_float",
    "type": "FLOAT",
    "mode": "NULLABLE"
  },
  {
    "name": "test_boolean",
    "type": "BOOLEAN",
    "mode": "NULLABLE"
  }
]
SCHEMA
[
  {
    "fields": [
      {
        "mode": "NULLABLE",
        "name": "dest_ip",
        "type": "STRING"
      },
      {
        "mode": "NULLABLE",
        "name": "dest_port",
        "type": "INTEGER"
      },
      {
        "mode": "REPEATED",
        "name": "flags",
        "type": "STRING"
      },
      {
        "mode": "NULLABLE",
        "name": "src_ip",
        "type": "STRING"
      },
      {
        "mode": "NULLABLE",
        "name": "src_port",
        "type": "INTEGER"
      }
    ],
    "mode": "NULLABLE",
    "name": "connection_info",
    "type": "RECORD"
  },
  {
    "mode": "REPEATED",
    "name": "data_sources",
    "type": "STRING"
  },
  {
    "mode": "NULLABLE",
    "name": "event_time",
    "type": "TIMESTAMP"
  },
  {
    "mode": "NULLABLE",
    "name": "eventName",
    "type": "STRING"
  },
  {
    "mode": "NULLABLE",
    "name": "test_boolean",
    "type": "BOOLEAN"
  },
  {
    "mode": "NULLABLE",
    "name": "test_float",
    "type": "FLOAT"
  }
]
END

# JSON file field added, schema expanded
DATA keep_nulls
{"event_name": "test event", "extra_field": "testing", "event_time": "2020-06-02 23:57:12.120174 UTC", "connection_info": {"src_ip": "10.0.1.102", "src_port": 53, "dest_ip": "10.0.0.1", "dest_port": 53}, "data_sources": ["dhcp", "bro", "dns"], "test_float": 17.6, "test_boolean": "True"}
EXISTING_SCHEMA
[
  {
    "name": "event_name",
    "type": "STRING",
    "mode": "NULLABLE"
  },
  {
    "name": "event_time",
    "type": "TIMESTAMP",
    "mode": "NULLABLE"
  },
  {
    "name": "connection_info",
    "type": "RECORD",
    "mode": "NULLABLE",
    "fields": [
      {
        "name": "src_ip",
        "type": "STRING"
      },
      {
        "name": "dest_ip",
        "type": "STRING"
      },
      {
        "name": "src_port",
        "type": "INTEGER"
      },
      {
        "name": "dest_port",
        "type": "INTEGER"
      },
      {
        "name": "flags",
        "type": "STRING",
        "mode": "REPEATED"
      }
    ]
  },
  {
    "name": "data_sources",
    "type": "STRING",
    "mode": "REPEATED"
  },
  {
    "name": "test_float",
    "type": "FLOAT",
    "mode": "NULLABLE"
  },
  {
    "name": "test_boolean",
    "type": "BOOLEAN",
    "mode": "NULLABLE"
  }
]
SCHEMA
[
  {
    "fields": [
      {
        "mode": "NULLABLE",
        "name": "dest_ip",
        "type": "STRING"
      },
      {
        "mode": "NULLABLE",
        "name": "dest_port",
        "type": "INTEGER"
      },
      {
        "mode": "REPEATED",
        "name": "flags",
        "type": "STRING"
      },
      {
        "mode": "NULLABLE",
        "name": "src_ip",
        "type": "STRING"
      },
      {
        "mode": "NULLABLE",
        "name": "src_port",
        "type": "INTEGER"
      }
    ],
    "mode": "NULLABLE",
    "name": "connection_info",
    "type": "RECORD"
  },
  {
    "mode": "REPEATED",
    "name": "data_sources",
    "type": "STRING"
  },
  {
    "mode": "NULLABLE",
    "name": "event_name",
    "type": "STRING"
  },
  {
    "mode": "NULLABLE",
    "name": "event_time",
    "type": "TIMESTAMP"
  },
  {
    "mode": "NULLABLE",
    "name": "extra_field",
    "type": "STRING"
  },
  {
    "mode": "NULLABLE",
    "name": "test_boolean",
    "type": "BOOLEAN"
  },
  {
    "mode": "NULLABLE",
    "name": "test_float",
    "type": "FLOAT"
  }
]
END

# JSON existing schema REQUIRED to NULLABLE no infer_mode set, errors with
# cannot change mode
DATA keep_nulls
{"event_name": "test event", "event_time": "2020-06-02 23:57:12.120174 UTC", "connection_info": {"src_ip": "10.0.1.102", "src_port": 53, "dest_ip": "10.0.0.1", "dest_port": 53}, "data_sources": ["dhcp", "bro", "dns"], "test_boolean": "True", "test_float": 1.3}
{"event_name": "test event", "event_time": "2020-06-02 23:57:12.120174 UTC", "connection_info": {"src_ip": "10.0.1.102", "src_port": 53, "dest_ip": "10.0.0.1", "dest_port": 53}, "data_sources": ["dhcp", "bro", "dns"], "test_boolean": "True", "test_float": null}
EXISTING_SCHEMA
[
  {
    "name": "event_name",
    "type": "STRING",
    "mode": "NULLABLE"
  },
  {
    "name": "event_time",
    "type": "TIMESTAMP",
    "mode": "NULLABLE"
  },
  {
    "name": "connection_info",
    "type": "RECORD",
    "mode": "NULLABLE",
    "fields": [
      {
        "name": "src_ip",
        "type": "STRING"
      },
      {
        "name": "dest_ip",
        "type": "STRING"
      },
      {
        "name": "src_port",
        "type": "INTEGER"
      },
      {
        "name": "dest_port",
        "type": "INTEGER"
      },
      {
        "name": "flags",
        "type": "STRING",
        "mode": "REPEATED"
      }
    ]
  },
  {
    "name": "data_sources",
    "type": "STRING",
    "mode": "REPEATED"
  },
  {
    "name": "test_float",
    "type": "FLOAT",
    "mode": "REQUIRED"
  },
  {
    "name": "test_boolean",
    "type": "BOOLEAN",
    "mode": "NULLABLE"
  }
]
ERRORS
2: Ignoring non-RECORD field with mismatched mode. cannot convert to NULLABLE because infer_schema not set: old=(hard,test_float,REQUIRED,FLOAT); new=(soft,test_float,NULLABLE,STRING)
SCHEMA
[
  {
    "fields": [
      {
        "mode": "NULLABLE",
        "name": "dest_ip",
        "type": "STRING"
      },
      {
        "mode": "NULLABLE",
        "name": "dest_port",
        "type": "INTEGER"
      },
      {
        "mode": "REPEATED",
        "name": "flags",
        "type": "STRING"
      },
      {
        "mode": "NULLABLE",
        "name": "src_ip",
        "type": "STRING"
      },
      {
        "mode": "NULLABLE",
        "name": "src_port",
        "type": "INTEGER"
      }
    ],
    "mode": "NULLABLE",
    "name": "connection_info",
    "type": "RECORD"
  },
  {
    "mode": "REPEATED",
    "name": "data_sources",
    "type": "STRING"
  },
  {
    "mode": "NULLABLE",
    "name": "event_name",
    "type": "STRING"
  },
  {
    "mode": "NULLABLE",
    "name": "event_time",
    "type": "TIMESTAMP"
  },
  {
    "mode": "NULLABLE",
    "name": "test_boolean",
    "type": "BOOLEAN"
  }
]
END

# JSON existing schema REQUIRED to NULLABLE infer_mode set so this should relax
# the field mode
DATA keep_nulls infer_mode
{"event_name": "test event", "event_time": "2020-06-02 23:57:12.120174 UTC", "connection_info": {"src_ip": "10.0.1.102", "src_port": 53, "dest_ip": "10.0.0.1", "dest_port": 53}, "data_sources": ["dhcp", "bro", "dns"], "test_boolean": "True", "test_float": 1.3}
{"event_name": "test event", "event_time": "2020-06-02 23:57:12.120174 UTC", "connection_info": {"src_ip": "10.0.1.102", "src_port": 53, "dest_ip": "10.0.0.1", "dest_port": 53}, "data_sources": ["dhcp", "bro", "dns"], "test_boolean": "True", "test_float": null}
EXISTING_SCHEMA
[
  {
    "name": "event_name",
    "type": "STRING",
    "mode": "NULLABLE"
  },
  {
    "name": "event_time",
    "type": "TIMESTAMP",
    "mode": "NULLABLE"
  },
  {
    "name": "connection_info",
    "type": "RECORD",
    "mode": "NULLABLE",
    "fields": [
      {
        "name": "src_ip",
        "type": "STRING"
      },
      {
        "name": "dest_ip",
        "type": "STRING"
      },
      {
        "name": "src_port",
        "type": "INTEGER"
      },
      {
        "name": "dest_port",
        "type": "INTEGER"
      },
      {
        "name": "flags",
        "type": "STRING",
        "mode": "REPEATED"
      }
    ]
  },
  {
    "name": "data_sources",
    "type": "STRING",
    "mode": "REPEATED"
  },
  {
    "name": "test_float",
    "type": "FLOAT",
    "mode": "REQUIRED"
  },
  {
    "name": "test_boolean",
    "type": "BOOLEAN",
    "mode": "NULLABLE"
  }
]
SCHEMA
[
  {
    "fields": [
      {
        "mode": "NULLABLE",
        "name": "dest_ip",
        "type": "STRING"
      },
      {
        "mode": "NULLABLE",
        "name": "dest_port",
        "type": "INTEGER"
      },
      {
        "mode": "REPEATED",
        "name": "flags",
        "type": "STRING"
      },
      {
        "mode": "NULLABLE",
        "name": "src_ip",
        "type": "STRING"
      },
      {
        "mode": "NULLABLE",
        "name": "src_port",
        "type": "INTEGER"
      }
    ],
    "mode": "NULLABLE",
    "name": "connection_info",
    "type": "RECORD"
  },
  {
    "mode": "REPEATED",
    "name": "data_sources",
    "type": "STRING"
  },
  {
    "mode": "NULLABLE",
    "name": "event_name",
    "type": "STRING"
  },
  {
    "mode": "NULLABLE",
    "name": "event_time",
    "type": "TIMESTAMP"
  },
  {
    "mode": "NULLABLE",
    "name": "test_boolean",
    "type": "BOOLEAN"
  },
  {
    "mode": "NULLABLE",
    "name": "test_float",
    "type": "FLOAT"
  }
]
END

# Testing standard SQL types to legacy types
DATA keep_nulls infer_mode
{"event_name": "test event", "event_time": "2020-06-02 23:57:12.120174 UTC", "connection_info": {"src_ip": "10.0.1.102", "src_port": 53, "dest_ip": "10.0.0.1", "dest_port": 53}, "data_sources": ["dhcp", "bro", "dns"], "test_boolean": "True", "test_float": 1.3}
{"event_name": "test event", "event_time": "2020-06-02 23:57:12.120174 UTC", "connection_info": {"src_ip": "10.0.1.102", "src_port": 53, "dest_ip": "10.0.0.1", "dest_port": 53}, "data_sources": ["dhcp", "bro", "dns"], "test_boolean": "True", "test_float": null}
EXISTING_SCHEMA
[
  {
    "name": "event_name",
    "type": "STRING",
    "mode": "NULLABLE"
  },
  {
    "name": "event_time",
    "type": "TIMESTAMP",
    "mode": "NULLABLE"
  },
  {
    "name": "connection_info",
    "type": "STRUCT",
    "mode": "NULLABLE",
    "fields": [
      {
        "name": "src_ip",
        "type": "STRING"
      },
      {
        "name": "dest_ip",
        "type": "STRING"
      },
      {
        "name": "src_port",
        "type": "INT64"
      },
      {
        "name": "dest_port",
        "type": "INT64"
      },
      {
        "name": "flags",
        "type": "STRING",
        "mode": "REPEATED"
      }
    ]
  },
  {
    "name": "data_sources",
    "type": "STRING",
    "mode": "REPEATED"
  },
  {
    "name": "test_float",
    "type": "FLOAT64",
    "mode": "REQUIRED"
  },
  {
    "name": "test_boolean",
    "type": "BOOL",
    "mode": "NULLABLE"
  }
]
SCHEMA
[
  {
    "fields": [
      {
        "mode": "NULLABLE",
        "name": "dest_ip",
        "type": "STRING"
      },
      {
        "mode": "NULLABLE",
        "name": "dest_port",
        "type": "INTEGER"
      },
      {
        "mode": "REPEATED",
        "name": "flags",
        "type": "STRING"
      },
      {
        "mode": "NULLABLE",
        "name": "src_ip",
        "type": "STRING"
      },
      {
        "mode": "NULLABLE",
        "name": "src_port",
        "type": "INTEGER"
      }
    ],
    "mode": "NULLABLE",
    "name": "connection_info",
    "type": "RECORD"
  },
  {
    "mode": "REPEATED",
    "name": "data_sources",
    "type": "STRING"
  },
  {
    "mode": "NULLABLE",
    "name": "event_name",
    "type": "STRING"
  },
  {
    "mode": "NULLABLE",
    "name": "event_time",
    "type": "TIMESTAMP"
  },
  {
    "mode": "NULLABLE",
    "name": "test_boolean",
    "type": "BOOLEAN"
  },
  {
    "mode": "NULLABLE",
    "name": "test_float",
    "type": "FLOAT"
  }
]
END

# Verify that the --infer_mode flag for JSON input does NOT cause the schema
# mode to become REQUIRED, even though in the following, it will mistakenly
# think that every field is defined for all records, because it cannot (easily)
# detect the absence of a field in a record.
DATA infer_mode
{ "i" : 1, "f": 1.0, "r": {"a": 1} }
{ "f": 1.0 }
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "f",
    "type": "FLOAT"
  },
  {
    "mode": "NULLABLE",
    "name": "i",
    "type": "INTEGER"
  },
  {
    "fields": [
      {
        "mode": "NULLABLE",
        "name": "a",
        "type": "INTEGER"
      }
    ],
    "mode": "NULLABLE",
    "name": "r",
    "type": "RECORD"
  }
]
END

# Test a JSON record that is nested 26-levels deep. This issue
# (https://github.com/bxparks/bigquery-schema-generator/issues/51) claims
# that there is a problem, but I cannot reproduce it with the following test.
DATA
{ "a": { "b": { "c": { "d": { "e": { "f": { "g": { "h": { "i": { "j": { "k": { "l": { "m" : { "n": { "o": { "p" : { "q": { "r": { "s": { "t": { "u": { "v": { "w": { "x": { "y": { "z": 1 }}}}}}}}}}}}}}}}}}}}}}}}}}
SCHEMA
[
  {
    "fields": [
      {
        "fields": [
          {
            "fields": [
              {
                "fields": [
                  {
                    "fields": [
                      {
                        "fields": [
                          {
                            "fields": [
                              {
                                "fields": [
                                  {
                                    "fields": [
                                      {
                                        "fields": [
                                          {
                                            "fields": [
                                              {
                                                "fields": [
                                                  {
                                                    "fields": [
                                                      {
                                                        "fields": [
                                                          {
                                                            "fields": [
                                                              {
                                                                "fields": [
                                                                  {
                                                                    "fields": [
                                                                      {
                                                                        "fields": [
                                                                          {
                                                                            "fields": [
                                                                              {
                                                                                "fields": [
                                                                                  {
                                                                                    "fields": [
                                                                                      {
                                                                                        "fields": [
                                                                                          {
                                                                                            "fields": [
                                                                                              {
                                                                                                "fields": [
                                                                                                  {
                                                                                                    "fields": [
                                                                                                      {
                                                                                                        "mode": "NULLABLE",
                                                                                                        "name": "z",
                                                                                                        "type": "INTEGER"
                                                                                                      }
                                                                                                    ],
                                                                                                    "mode": "NULLABLE",
                                                                                                    "name": "y",
                                                                                                    "type": "RECORD"
                                                                                                  }
                                                                                                ],
                                                                                                "mode": "NULLABLE",
                                                                                                "name": "x",
                                                                                                "type": "RECORD"
                                                                                              }
                                                                                            ],
                                                                                            "mode": "NULLABLE",
                                                                                            "name": "w",
                                                                                            "type": "RECORD"
                                                                                          }
                                                                                        ],
                                                                                        "mode": "NULLABLE",
                                                                                        "name": "v",
                                                                                        "type": "RECORD"
                                                                                      }
                                                                                    ],
                                                                                    "mode": "NULLABLE",
                                                                                    "name": "u",
                                                                                    "type": "RECORD"
                                                                                  }
                                                                                ],
                                                                                "mode": "NULLABLE",
                                                                                "name": "t",
                                                                                "type": "RECORD"
                                                                              }
                                                                            ],
                                                                            "mode": "NULLABLE",
                                                                            "name": "s",
                                                                            "type": "RECORD"
                                                                          }
                                                                        ],
                                                                        "mode": "NULLABLE",
                                                                        "name": "r",
                                                                        "type": "RECORD"
                                                                      }
                                                                    ],
                                                                    "mode": "NULLABLE",
                                                                    "name": "q",
                                                                    "type": "RECORD"
                                                                  }
                                                                ],
                                                                "mode": "NULLABLE",
                                                                "name": "p",
                                                                "type": "RECORD"
                                                              }
                                                            ],
                                                            "mode": "NULLABLE",
                                                            "name": "o",
                                                            "type": "RECORD"
                                                          }
                                                        ],
                                                        "mode": "NULLABLE",
                                                        "name": "n",
                                                        "type": "RECORD"
                                                      }
                                                    ],
                                                    "mode": "NULLABLE",
                                                    "name": "m",
                                                    "type": "RECORD"
                                                  }
                                                ],
                                                "mode": "NULLABLE",
                                                "name": "l",
                                                "type": "RECORD"
                                              }
                                            ],
                                            "mode": "NULLABLE",
                                            "name": "k",
                                            "type": "RECORD"
                                          }
                                        ],
                                        "mode": "NULLABLE",
                                        "name": "j",
                                        "type": "RECORD"
                                      }
                                    ],
                                    "mode": "NULLABLE",
                                    "name": "i",
                                    "type": "RECORD"
                                  }
                                ],
                                "mode": "NULLABLE",
                                "name": "h",
                                "type": "RECORD"
                              }
                            ],
                            "mode": "NULLABLE",
                            "name": "g",
                            "type": "RECORD"
                          }
                        ],
                        "mode": "NULLABLE",
                        "name": "f",
                        "type": "RECORD"
                      }
                    ],
                    "mode": "NULLABLE",
                    "name": "e",
                    "type": "RECORD"
                  }
                ],
                "mode": "NULLABLE",
                "name": "d",
                "type": "RECORD"
              }
            ],
            "mode": "NULLABLE",
            "name": "c",
            "type": "RECORD"
          }
        ],
        "mode": "NULLABLE",
        "name": "b",
        "type": "RECORD"
      }
    ],
    "mode": "NULLABLE",
    "name": "a",
    "type": "RECORD"
  }
]
END

# Test --preserve_input_sort_order flag. Without the flag, the
# keys are in sorted order, for compatibility with 'bq load --autodetect`,
# at least what 'bq load' used to do.
# See https://github.com/bxparks/bigquery-schema-generator/pull/75
DATA
{ "s": "string", "i": 3, "x": 3.2, "b": true }
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "b",
    "type": "BOOLEAN"
  },
  {
    "mode": "NULLABLE",
    "name": "i",
    "type": "INTEGER"
  },
  {
    "mode": "NULLABLE",
    "name": "s",
    "type": "STRING"
  },
  {
    "mode": "NULLABLE",
    "name": "x",
    "type": "FLOAT"
  }
]
END

# Test --preserve_input_sort_order flag. With the flag, the column keys should
# be in the order they appear in the JSON data.
# See https://github.com/bxparks/bigquery-schema-generator/pull/75
DATA preserve_input_sort_order
{ "s": "string", "i": 3, "x": 3.2, "b": true }
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "s",
    "type": "STRING"
  },
  {
    "mode": "NULLABLE",
    "name": "i",
    "type": "INTEGER"
  },
  {
    "mode": "NULLABLE",
    "name": "x",
    "type": "FLOAT"
  },
  {
    "mode": "NULLABLE",
    "name": "b",
    "type": "BOOLEAN"
  }
]
END

# Test --preserve_input_sort_order flag. Each JSON data record can contain a
# partial list of keys. So the order of columns in the schema will be the order
# in which they are first *seen* by the bigquery_schema_generator.
# See https://github.com/bxparks/bigquery-schema-generator/pull/75
DATA preserve_input_sort_order
{ "s": "string", "i": 3 }
{ "x": 3.2, "s": "string", "i": 3 }
{ "b": true, "x": 3.2, "s": "string", "i": 3 }
SCHEMA
[
  {
    "mode": "NULLABLE",
    "name": "s",
    "type": "STRING"
  },
  {
    "mode": "NULLABLE",
    "name": "i",
    "type": "INTEGER"
  },
  {
    "mode": "NULLABLE",
    "name": "x",
    "type": "FLOAT"
  },
  {
    "mode": "NULLABLE",
    "name": "b",
    "type": "BOOLEAN"
  }
]
END

# Allow null to be converted into a REPEATED.
DATA
{"array":null}
{"array":["a","b"]}
{"array":null}
{"array":["c","d","e"]}
SCHEMA
[
  {
    "mode": "REPEATED",
    "name": "array",
    "type": "STRING"
  }
]
END

# The REPEATED fields must be of the same type.
DATA
{"array":null}
{"array":["a","b"]}
{"array":null}
{"array":[1,2,3]}
ERRORS
4: Ignoring field with mismatched type: old=(hard,array,REPEATED,STRING); new=(hard,array,REPEATED,INTEGER)
SCHEMA
[]
END

# An record with an empty array is considered to be identical to a null record
# by BigQuery, and should be able to convert into converted into a REPEATED
# String.
DATA
{"array":[]}
{"array":["a","b"]}
{"array":null}
{"array":["c","d","e"]}
SCHEMA
[
  {
    "mode": "REPEATED",
    "name": "array",
    "type": "STRING"
  }
]
END

# An empty array, which is temporarily inferred to be a REPEATED STRING
# (soft), should be able to convert into a REPEATED INTEGER (hard).
DATA
{"array":[]}
{"array":[1,2]}
{"array":null}
{"array":[3,4,5]}
SCHEMA
[
  {
    "mode": "REPEATED",
    "name": "array",
    "type": "INTEGER"
  }
]
END
